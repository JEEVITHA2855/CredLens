{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true\n});\nexport const analyzeClaimAPI = async input => {\n  try {\n    console.log('Sending analysis request:', input);\n    const response = await api.post('/analyze', {\n      text: input.text\n    });\n    console.log('Received response:', response.data);\n\n    // If the response has the expected structure, return it\n    if (response.data && response.data.claim) {\n      return response.data;\n    }\n    throw new Error('Invalid response format');\n  } catch (error) {\n    console.error('Analysis error:', error);\n\n    // Detailed error logging\n    if (error.response) {\n      var _error$response$data;\n      console.error('Response error:', error.response.data);\n      throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Server error: ' + error.response.status);\n    } else if (error.request) {\n      console.error('Request error:', error.request);\n      throw new Error('Cannot connect to server - please check if the backend is running');\n    } else {\n      console.error('Other error:', error.message);\n      throw new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n};\nexport const analyzeIndustrialAPI = async content => {\n  try {\n    const response = await api.post('/analyze-industrial', {\n      content\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.detail || 'Industrial analysis failed');\n    } else if (error.request) {\n      throw new Error('Network error - please check your connection');\n    } else {\n      throw new Error('Request failed - please try again');\n    }\n  }\n};\nexport const getHealthAPI = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw new Error('Health check failed');\n  }\n};\nexport const getStatsAPI = async () => {\n  try {\n    const response = await api.get('/stats');\n    return response.data;\n  } catch (error) {\n    throw new Error('Stats fetch failed');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","withCredentials","analyzeClaimAPI","input","console","log","response","post","text","data","claim","Error","error","_error$response$data","status","request","message","analyzeIndustrialAPI","content","detail","getHealthAPI","get","getStatsAPI"],"sources":["E:/CredLens/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  },\r\n  withCredentials: true\r\n});\r\n\r\nexport const analyzeClaimAPI = async (input) => {\r\n  try {\r\n    console.log('Sending analysis request:', input);\r\n    const response = await api.post('/analyze', { text: input.text });\r\n    console.log('Received response:', response.data);\r\n    \r\n    // If the response has the expected structure, return it\r\n    if (response.data && response.data.claim) {\r\n      return response.data;\r\n    }\r\n    \r\n    throw new Error('Invalid response format');\r\n  } catch (error) {\r\n    console.error('Analysis error:', error);\r\n    \r\n    // Detailed error logging\r\n    if (error.response) {\r\n      console.error('Response error:', error.response.data);\r\n      throw new Error(error.response.data?.error || 'Server error: ' + error.response.status);\r\n    } else if (error.request) {\r\n      console.error('Request error:', error.request);\r\n      throw new Error('Cannot connect to server - please check if the backend is running');\r\n    } else {\r\n      console.error('Other error:', error.message);\r\n      throw new Error(error.message || 'An unexpected error occurred');\r\n    }\r\n  }\r\n};\r\n\r\nexport const analyzeIndustrialAPI = async (content) => {\r\n  try {\r\n    const response = await api.post('/analyze-industrial', { content });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(error.response.data.detail || 'Industrial analysis failed');\r\n    } else if (error.request) {\r\n      throw new Error('Network error - please check your connection');\r\n    } else {\r\n      throw new Error('Request failed - please try again');\r\n    }\r\n  }\r\n};\r\n\r\nexport const getHealthAPI = async () => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Health check failed');\r\n  }\r\n};\r\n\r\nexport const getStatsAPI = async () => {\r\n  try {\r\n    const response = await api.get('/stats');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Stats fetch failed');\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}