{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const api=axios.create({baseURL:API_BASE_URL,timeout:30000,headers:{'Content-Type':'application/json','Accept':'application/json'},withCredentials:true});export const analyzeClaimAPI=async input=>{try{console.log('Sending analysis request:',input);const response=await api.post('/analyze',{text:input.text});console.log('Received response:',response.data);// If the response already has the expected structure, return it as-is\nif(response.data&&response.data.claim){return response.data;}// Otherwise, map ultra_simple backend response to the UI-expected schema\nconst data=response.data||{};const claimText=data.claim_text||(input===null||input===void 0?void 0:input.text)||(input===null||input===void 0?void 0:input.url)||'';if(!claimText){throw new Error('Invalid response format');}// Helper: quick URL check\nconst isUrl=val=>{try{new URL(val);return true;}catch(_){return false;}};// Map backend status to UI verification status labels\nconst statusMap={VERIFIED:'Likely True',DEBUNKED:'Likely False',UNCERTAIN:'Mixed'};let uiVerificationStatus=statusMap[data.status]||'Mixed';// Normalize evidence into the richer structure expected by the UI\nconst flatEvidence=Array.isArray(data.evidence)?data.evidence:[];const confidenceScore=typeof data.confidence_score==='number'?data.confidence_score:0.5;// 0..1\nconst mappedEvidence=flatEvidence.map(item=>{// If item is a simple string, convert to structured record\nif(typeof item==='string'){if(isUrl(item)){let host='';try{host=new URL(item).hostname;}catch(_){host='Source';}return{text:'Referenced source',source:host,url:item,nli_label:'ENTAILMENT',confidence:confidenceScore,similarity_score:Math.min(1,Math.max(0,confidenceScore))};}return{text:item,source:'AI Analysis',nli_label:'NEUTRAL',confidence:0.6,similarity_score:0.5};}// If already an object, ensure required fields with sensible defaults\nreturn{text:item.text||'Evidence',source:item.source||'AI Analysis',url:item.url||undefined,nli_label:item.nli_label||'NEUTRAL',confidence:typeof item.confidence==='number'?item.confidence:confidenceScore,similarity_score:typeof item.similarity_score==='number'?item.similarity_score:0.5};});// Use backend-provided fingerprint if available; otherwise synthesize a basic one\nlet fingerprint=data.credibility_fingerprint;if(!fingerprint||typeof fingerprint!=='object'){const corroborationCount=mappedEvidence.filter(e=>!!e.url).length;const overall=Math.min(1,Math.max(0,confidenceScore));fingerprint={overall_score:overall,source_credibility:overall,// reuse confidence as a proxy\nlanguage_risk:Math.max(0,1-overall),corroboration_count:corroborationCount};}if((mappedEvidence.length===0||mappedEvidence.every(e=>!e.url))&&(fingerprint.overall_score||0)<0.45){uiVerificationStatus='Unverified';}// Provide a simple micro-lesson tip\nlet microLesson=data.micro_lesson||'Always verify information across multiple reliable sources.';if(!data.micro_lesson){if(uiVerificationStatus==='Likely True'){microLesson='Corroborate with at least two independent, reputable sources.';}else if(uiVerificationStatus==='Likely False'){microLesson='Be wary of sensational claimsâ€”check reputable fact-checkers and primary sources.';}else{microLesson='Seek more reliable sources and check dates, authors, and original context.';}}// Build detective-style reasons\nconst reasons=Array.isArray(data.reasons)&&data.reasons.length>0?data.reasons.slice(0,3):function(){const r=[];const hasUrls=mappedEvidence.some(e=>!!e.url);if(!hasUrls)r.push('Few or no independent sources found; verify with additional reputable sites.');if(Array.isArray(data.suspicious_phrases)&&data.suspicious_phrases.length>0){const phrases=data.suspicious_phrases.slice(0,2).map(p=>p.phrase).join(', ');r.push(\"Language uses emotional or clickbait terms (\".concat(phrases,\").\"));}if(isUrl((input===null||input===void 0?void 0:input.text)||'')){try{const domain=new URL(input.text).hostname;r.push(\"Source domain: \".concat(domain));}catch(_unused){}}return r.slice(0,3);}();const mapped={// Core fields expected by App and components\nclaim:claimText,extracted_claim:claimText,original_input:(input===null||input===void 0?void 0:input.text)||(input===null||input===void 0?void 0:input.url)||claimText,credibility_fingerprint:fingerprint,evidence:mappedEvidence,verification_status:uiVerificationStatus,suspicious_phrases:Array.isArray(data.suspicious_phrases)?data.suspicious_phrases:[],micro_lesson:microLesson,explanation:data.explanation||'Analysis completed using Gemini AI',reasons,metadata:data.metadata||{}};return mapped;}catch(error){console.error('Analysis error:',error);// Detailed error logging\nif(error.response){var _error$response$data;console.error('Response error:',error.response.data);throw new Error(((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Server error: '+error.response.status);}else if(error.request){console.error('Request error:',error.request);throw new Error('Cannot connect to server - please check if the backend is running');}else{console.error('Other error:',error.message);throw new Error(error.message||'An unexpected error occurred');}}};export const analyzeIndustrialAPI=async content=>{try{const response=await api.post('/analyze-industrial',{content});return response.data;}catch(error){if(error.response){throw new Error(error.response.data.detail||'Industrial analysis failed');}else if(error.request){throw new Error('Network error - please check your connection');}else{throw new Error('Request failed - please try again');}}};export const getHealthAPI=async()=>{try{const response=await api.get('/health');return response.data;}catch(error){throw new Error('Health check failed');}};export const getStatsAPI=async()=>{try{const response=await api.get('/stats');return response.data;}catch(error){throw new Error('Stats fetch failed');}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","withCredentials","analyzeClaimAPI","input","console","log","response","post","text","data","claim","claimText","claim_text","url","Error","isUrl","val","URL","_","statusMap","VERIFIED","DEBUNKED","UNCERTAIN","uiVerificationStatus","status","flatEvidence","Array","isArray","evidence","confidenceScore","confidence_score","mappedEvidence","map","item","host","hostname","source","nli_label","confidence","similarity_score","Math","min","max","undefined","fingerprint","credibility_fingerprint","corroborationCount","filter","e","length","overall","overall_score","source_credibility","language_risk","corroboration_count","every","microLesson","micro_lesson","reasons","slice","r","hasUrls","some","push","suspicious_phrases","phrases","p","phrase","join","concat","domain","_unused","mapped","extracted_claim","original_input","verification_status","explanation","metadata","error","_error$response$data","request","message","analyzeIndustrialAPI","content","detail","getHealthAPI","get","getStatsAPI"],"sources":["E:/CredLens/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  },\r\n  withCredentials: true\r\n});\r\n\r\nexport const analyzeClaimAPI = async (input) => {\r\n  try {\r\n    console.log('Sending analysis request:', input);\r\n    const response = await api.post('/analyze', { text: input.text });\r\n    console.log('Received response:', response.data);\r\n    \r\n    // If the response already has the expected structure, return it as-is\r\n    if (response.data && response.data.claim) {\r\n      return response.data;\r\n    }\r\n\r\n    // Otherwise, map ultra_simple backend response to the UI-expected schema\r\n    const data = response.data || {};\r\n\r\n    const claimText = data.claim_text || input?.text || input?.url || '';\r\n    if (!claimText) {\r\n      throw new Error('Invalid response format');\r\n    }\r\n\r\n    // Helper: quick URL check\r\n    const isUrl = (val) => {\r\n      try { new URL(val); return true; } catch (_) { return false; }\r\n    };\r\n\r\n    // Map backend status to UI verification status labels\r\n    const statusMap = {\r\n      VERIFIED: 'Likely True',\r\n      DEBUNKED: 'Likely False',\r\n      UNCERTAIN: 'Mixed',\r\n    };\r\n  let uiVerificationStatus = statusMap[data.status] || 'Mixed';\r\n\r\n    // Normalize evidence into the richer structure expected by the UI\r\n    const flatEvidence = Array.isArray(data.evidence) ? data.evidence : [];\r\n    const confidenceScore = typeof data.confidence_score === 'number' ? data.confidence_score : 0.5; // 0..1\r\n\r\n    const mappedEvidence = flatEvidence.map((item) => {\r\n      // If item is a simple string, convert to structured record\r\n      if (typeof item === 'string') {\r\n        if (isUrl(item)) {\r\n          let host = '';\r\n          try { host = new URL(item).hostname; } catch (_) { host = 'Source'; }\r\n          return {\r\n            text: 'Referenced source',\r\n            source: host,\r\n            url: item,\r\n            nli_label: 'ENTAILMENT',\r\n            confidence: confidenceScore,\r\n            similarity_score: Math.min(1, Math.max(0, confidenceScore)),\r\n          };\r\n        }\r\n        return {\r\n          text: item,\r\n          source: 'AI Analysis',\r\n          nli_label: 'NEUTRAL',\r\n          confidence: 0.6,\r\n          similarity_score: 0.5,\r\n        };\r\n      }\r\n      // If already an object, ensure required fields with sensible defaults\r\n      return {\r\n        text: item.text || 'Evidence',\r\n        source: item.source || 'AI Analysis',\r\n        url: item.url || undefined,\r\n        nli_label: item.nli_label || 'NEUTRAL',\r\n        confidence: typeof item.confidence === 'number' ? item.confidence : confidenceScore,\r\n        similarity_score: typeof item.similarity_score === 'number' ? item.similarity_score : 0.5,\r\n      };\r\n    });\r\n\r\n  // Use backend-provided fingerprint if available; otherwise synthesize a basic one\r\n    let fingerprint = data.credibility_fingerprint;\r\n    if (!fingerprint || typeof fingerprint !== 'object') {\r\n      const corroborationCount = mappedEvidence.filter(e => !!e.url).length;\r\n      const overall = Math.min(1, Math.max(0, confidenceScore));\r\n      fingerprint = {\r\n        overall_score: overall,\r\n        source_credibility: overall, // reuse confidence as a proxy\r\n        language_risk: Math.max(0, 1 - overall),\r\n        corroboration_count: corroborationCount,\r\n      };\r\n    }\r\n\r\n    if ((mappedEvidence.length === 0 || mappedEvidence.every(e => !e.url)) && (fingerprint.overall_score || 0) < 0.45) {\r\n      uiVerificationStatus = 'Unverified';\r\n    }\r\n\r\n    // Provide a simple micro-lesson tip\r\n    let microLesson = data.micro_lesson || 'Always verify information across multiple reliable sources.';\r\n    if (!data.micro_lesson) {\r\n      if (uiVerificationStatus === 'Likely True') {\r\n        microLesson = 'Corroborate with at least two independent, reputable sources.';\r\n      } else if (uiVerificationStatus === 'Likely False') {\r\n        microLesson = 'Be wary of sensational claimsâ€”check reputable fact-checkers and primary sources.';\r\n      } else {\r\n        microLesson = 'Seek more reliable sources and check dates, authors, and original context.';\r\n      }\r\n    }\r\n\r\n    // Build detective-style reasons\r\n    const reasons = Array.isArray(data.reasons) && data.reasons.length > 0\r\n      ? data.reasons.slice(0, 3)\r\n      : (function() {\r\n          const r = [];\r\n          const hasUrls = mappedEvidence.some(e => !!e.url);\r\n          if (!hasUrls) r.push('Few or no independent sources found; verify with additional reputable sites.');\r\n          if (Array.isArray(data.suspicious_phrases) && data.suspicious_phrases.length > 0) {\r\n            const phrases = data.suspicious_phrases.slice(0,2).map(p => p.phrase).join(', ');\r\n            r.push(`Language uses emotional or clickbait terms (${phrases}).`);\r\n          }\r\n          if (isUrl(input?.text || '')) {\r\n            try {\r\n              const domain = new URL(input.text).hostname;\r\n              r.push(`Source domain: ${domain}`);\r\n            } catch {}\r\n          }\r\n          return r.slice(0,3);\r\n        })();\r\n\r\n    const mapped = {\r\n      // Core fields expected by App and components\r\n      claim: claimText,\r\n      extracted_claim: claimText,\r\n      original_input: input?.text || input?.url || claimText,\r\n      credibility_fingerprint: fingerprint,\r\n      evidence: mappedEvidence,\r\n      verification_status: uiVerificationStatus,\r\n  suspicious_phrases: Array.isArray(data.suspicious_phrases) ? data.suspicious_phrases : [],\r\n      micro_lesson: microLesson,\r\n      explanation: data.explanation || 'Analysis completed using Gemini AI',\r\n      reasons,\r\n      metadata: data.metadata || {},\r\n    };\r\n\r\n    return mapped;\r\n  } catch (error) {\r\n    console.error('Analysis error:', error);\r\n    \r\n    // Detailed error logging\r\n    if (error.response) {\r\n      console.error('Response error:', error.response.data);\r\n      throw new Error(error.response.data?.error || 'Server error: ' + error.response.status);\r\n    } else if (error.request) {\r\n      console.error('Request error:', error.request);\r\n      throw new Error('Cannot connect to server - please check if the backend is running');\r\n    } else {\r\n      console.error('Other error:', error.message);\r\n      throw new Error(error.message || 'An unexpected error occurred');\r\n    }\r\n  }\r\n};\r\n\r\nexport const analyzeIndustrialAPI = async (content) => {\r\n  try {\r\n    const response = await api.post('/analyze-industrial', { content });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(error.response.data.detail || 'Industrial analysis failed');\r\n    } else if (error.request) {\r\n      throw new Error('Network error - please check your connection');\r\n    } else {\r\n      throw new Error('Request failed - please try again');\r\n    }\r\n  }\r\n};\r\n\r\nexport const getHealthAPI = async () => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Health check failed');\r\n  }\r\n};\r\n\r\nexport const getStatsAPI = async () => {\r\n  try {\r\n    const response = await api.get('/stats');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Stats fetch failed');\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}