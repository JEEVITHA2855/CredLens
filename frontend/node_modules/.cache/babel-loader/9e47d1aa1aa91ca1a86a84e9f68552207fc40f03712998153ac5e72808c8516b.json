{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true\n});\nexport const analyzeClaimAPI = async input => {\n  try {\n    console.log('Sending analysis request:', input);\n    const response = await api.post('/analyze', {\n      text: input.text\n    });\n    console.log('Received response:', response.data);\n\n    // If the response already has the expected structure, return it as-is\n    if (response.data && response.data.claim) {\n      return response.data;\n    }\n\n    // Otherwise, map ultra_simple backend response to the UI-expected schema\n    const data = response.data || {};\n    const claimText = data.claim_text || (input === null || input === void 0 ? void 0 : input.text) || (input === null || input === void 0 ? void 0 : input.url) || '';\n    if (!claimText) {\n      throw new Error('Invalid response format');\n    }\n\n    // Helper: quick URL check\n    const isUrl = val => {\n      try {\n        new URL(val);\n        return true;\n      } catch (_) {\n        return false;\n      }\n    };\n\n    // Map backend status to UI verification status labels\n    const statusMap = {\n      VERIFIED: 'Likely True',\n      DEBUNKED: 'Likely False',\n      UNCERTAIN: 'Mixed'\n    };\n    const uiVerificationStatus = statusMap[data.status] || 'Mixed';\n\n    // Normalize evidence into the richer structure expected by the UI\n    const flatEvidence = Array.isArray(data.evidence) ? data.evidence : [];\n    const confidenceScore = typeof data.confidence_score === 'number' ? data.confidence_score : 0.5; // 0..1\n\n    const mappedEvidence = flatEvidence.map(item => {\n      // If item is a simple string, convert to structured record\n      if (typeof item === 'string') {\n        if (isUrl(item)) {\n          let host = '';\n          try {\n            host = new URL(item).hostname;\n          } catch (_) {\n            host = 'Source';\n          }\n          return {\n            text: 'Referenced source',\n            source: host,\n            url: item,\n            nli_label: 'ENTAILMENT',\n            confidence: confidenceScore,\n            similarity_score: Math.min(1, Math.max(0, confidenceScore))\n          };\n        }\n        return {\n          text: item,\n          source: 'AI Analysis',\n          nli_label: 'NEUTRAL',\n          confidence: 0.6,\n          similarity_score: 0.5\n        };\n      }\n      // If already an object, ensure required fields with sensible defaults\n      return {\n        text: item.text || 'Evidence',\n        source: item.source || 'AI Analysis',\n        url: item.url || undefined,\n        nli_label: item.nli_label || 'NEUTRAL',\n        confidence: typeof item.confidence === 'number' ? item.confidence : confidenceScore,\n        similarity_score: typeof item.similarity_score === 'number' ? item.similarity_score : 0.5\n      };\n    });\n\n    // Build a basic credibility fingerprint so the UI renders\n    const corroborationCount = mappedEvidence.filter(e => !!e.url).length;\n    const overall = Math.min(1, Math.max(0, confidenceScore));\n    const fingerprint = {\n      overall_score: overall,\n      source_credibility: overall,\n      // reuse confidence as a proxy\n      language_risk: Math.max(0, 1 - overall),\n      corroboration_count: corroborationCount\n    };\n\n    // Provide a simple micro-lesson tip\n    let microLesson = 'Always verify information across multiple reliable sources.';\n    if (uiVerificationStatus === 'Likely True') {\n      microLesson = 'Corroborate with at least two independent, reputable sources.';\n    } else if (uiVerificationStatus === 'Likely False') {\n      microLesson = 'Be wary of sensational claimsâ€”check reputable fact-checkers and primary sources.';\n    } else {\n      microLesson = 'Seek more reliable sources and check dates, authors, and original context.';\n    }\n    const mapped = {\n      // Core fields expected by App and components\n      claim: claimText,\n      extracted_claim: claimText,\n      original_input: (input === null || input === void 0 ? void 0 : input.text) || (input === null || input === void 0 ? void 0 : input.url) || claimText,\n      credibility_fingerprint: fingerprint,\n      evidence: mappedEvidence,\n      verification_status: uiVerificationStatus,\n      suspicious_phrases: [],\n      micro_lesson: microLesson,\n      explanation: data.explanation || 'Analysis completed using Gemini AI'\n    };\n    return mapped;\n  } catch (error) {\n    console.error('Analysis error:', error);\n\n    // Detailed error logging\n    if (error.response) {\n      var _error$response$data;\n      console.error('Response error:', error.response.data);\n      throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Server error: ' + error.response.status);\n    } else if (error.request) {\n      console.error('Request error:', error.request);\n      throw new Error('Cannot connect to server - please check if the backend is running');\n    } else {\n      console.error('Other error:', error.message);\n      throw new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n};\nexport const analyzeIndustrialAPI = async content => {\n  try {\n    const response = await api.post('/analyze-industrial', {\n      content\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.detail || 'Industrial analysis failed');\n    } else if (error.request) {\n      throw new Error('Network error - please check your connection');\n    } else {\n      throw new Error('Request failed - please try again');\n    }\n  }\n};\nexport const getHealthAPI = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw new Error('Health check failed');\n  }\n};\nexport const getStatsAPI = async () => {\n  try {\n    const response = await api.get('/stats');\n    return response.data;\n  } catch (error) {\n    throw new Error('Stats fetch failed');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","withCredentials","analyzeClaimAPI","input","console","log","response","post","text","data","claim","claimText","claim_text","url","Error","isUrl","val","URL","_","statusMap","VERIFIED","DEBUNKED","UNCERTAIN","uiVerificationStatus","status","flatEvidence","Array","isArray","evidence","confidenceScore","confidence_score","mappedEvidence","map","item","host","hostname","source","nli_label","confidence","similarity_score","Math","min","max","undefined","corroborationCount","filter","e","length","overall","fingerprint","overall_score","source_credibility","language_risk","corroboration_count","microLesson","mapped","extracted_claim","original_input","credibility_fingerprint","verification_status","suspicious_phrases","micro_lesson","explanation","error","_error$response$data","request","message","analyzeIndustrialAPI","content","detail","getHealthAPI","get","getStatsAPI"],"sources":["E:/CredLens/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  },\r\n  withCredentials: true\r\n});\r\n\r\nexport const analyzeClaimAPI = async (input) => {\r\n  try {\r\n    console.log('Sending analysis request:', input);\r\n    const response = await api.post('/analyze', { text: input.text });\r\n    console.log('Received response:', response.data);\r\n    \r\n    // If the response already has the expected structure, return it as-is\r\n    if (response.data && response.data.claim) {\r\n      return response.data;\r\n    }\r\n\r\n    // Otherwise, map ultra_simple backend response to the UI-expected schema\r\n    const data = response.data || {};\r\n\r\n    const claimText = data.claim_text || input?.text || input?.url || '';\r\n    if (!claimText) {\r\n      throw new Error('Invalid response format');\r\n    }\r\n\r\n    // Helper: quick URL check\r\n    const isUrl = (val) => {\r\n      try { new URL(val); return true; } catch (_) { return false; }\r\n    };\r\n\r\n    // Map backend status to UI verification status labels\r\n    const statusMap = {\r\n      VERIFIED: 'Likely True',\r\n      DEBUNKED: 'Likely False',\r\n      UNCERTAIN: 'Mixed',\r\n    };\r\n    const uiVerificationStatus = statusMap[data.status] || 'Mixed';\r\n\r\n    // Normalize evidence into the richer structure expected by the UI\r\n    const flatEvidence = Array.isArray(data.evidence) ? data.evidence : [];\r\n    const confidenceScore = typeof data.confidence_score === 'number' ? data.confidence_score : 0.5; // 0..1\r\n\r\n    const mappedEvidence = flatEvidence.map((item) => {\r\n      // If item is a simple string, convert to structured record\r\n      if (typeof item === 'string') {\r\n        if (isUrl(item)) {\r\n          let host = '';\r\n          try { host = new URL(item).hostname; } catch (_) { host = 'Source'; }\r\n          return {\r\n            text: 'Referenced source',\r\n            source: host,\r\n            url: item,\r\n            nli_label: 'ENTAILMENT',\r\n            confidence: confidenceScore,\r\n            similarity_score: Math.min(1, Math.max(0, confidenceScore)),\r\n          };\r\n        }\r\n        return {\r\n          text: item,\r\n          source: 'AI Analysis',\r\n          nli_label: 'NEUTRAL',\r\n          confidence: 0.6,\r\n          similarity_score: 0.5,\r\n        };\r\n      }\r\n      // If already an object, ensure required fields with sensible defaults\r\n      return {\r\n        text: item.text || 'Evidence',\r\n        source: item.source || 'AI Analysis',\r\n        url: item.url || undefined,\r\n        nli_label: item.nli_label || 'NEUTRAL',\r\n        confidence: typeof item.confidence === 'number' ? item.confidence : confidenceScore,\r\n        similarity_score: typeof item.similarity_score === 'number' ? item.similarity_score : 0.5,\r\n      };\r\n    });\r\n\r\n    // Build a basic credibility fingerprint so the UI renders\r\n    const corroborationCount = mappedEvidence.filter(e => !!e.url).length;\r\n    const overall = Math.min(1, Math.max(0, confidenceScore));\r\n    const fingerprint = {\r\n      overall_score: overall,\r\n      source_credibility: overall, // reuse confidence as a proxy\r\n      language_risk: Math.max(0, 1 - overall),\r\n      corroboration_count: corroborationCount,\r\n    };\r\n\r\n    // Provide a simple micro-lesson tip\r\n    let microLesson = 'Always verify information across multiple reliable sources.';\r\n    if (uiVerificationStatus === 'Likely True') {\r\n      microLesson = 'Corroborate with at least two independent, reputable sources.';\r\n    } else if (uiVerificationStatus === 'Likely False') {\r\n      microLesson = 'Be wary of sensational claimsâ€”check reputable fact-checkers and primary sources.';\r\n    } else {\r\n      microLesson = 'Seek more reliable sources and check dates, authors, and original context.';\r\n    }\r\n\r\n    const mapped = {\r\n      // Core fields expected by App and components\r\n      claim: claimText,\r\n      extracted_claim: claimText,\r\n      original_input: input?.text || input?.url || claimText,\r\n      credibility_fingerprint: fingerprint,\r\n      evidence: mappedEvidence,\r\n      verification_status: uiVerificationStatus,\r\n      suspicious_phrases: [],\r\n      micro_lesson: microLesson,\r\n      explanation: data.explanation || 'Analysis completed using Gemini AI',\r\n    };\r\n\r\n    return mapped;\r\n  } catch (error) {\r\n    console.error('Analysis error:', error);\r\n    \r\n    // Detailed error logging\r\n    if (error.response) {\r\n      console.error('Response error:', error.response.data);\r\n      throw new Error(error.response.data?.error || 'Server error: ' + error.response.status);\r\n    } else if (error.request) {\r\n      console.error('Request error:', error.request);\r\n      throw new Error('Cannot connect to server - please check if the backend is running');\r\n    } else {\r\n      console.error('Other error:', error.message);\r\n      throw new Error(error.message || 'An unexpected error occurred');\r\n    }\r\n  }\r\n};\r\n\r\nexport const analyzeIndustrialAPI = async (content) => {\r\n  try {\r\n    const response = await api.post('/analyze-industrial', { content });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(error.response.data.detail || 'Industrial analysis failed');\r\n    } else if (error.request) {\r\n      throw new Error('Network error - please check your connection');\r\n    } else {\r\n      throw new Error('Request failed - please try again');\r\n    }\r\n  }\r\n};\r\n\r\nexport const getHealthAPI = async () => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Health check failed');\r\n  }\r\n};\r\n\r\nexport const getStatsAPI = async () => {\r\n  try {\r\n    const response = await api.get('/stats');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Stats fetch failed');\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}