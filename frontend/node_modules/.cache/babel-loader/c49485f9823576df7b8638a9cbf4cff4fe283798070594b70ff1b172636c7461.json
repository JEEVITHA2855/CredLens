{"ast":null,"code":"// Simple trusted source index: domain -> { score: 0..1, reason }\n// This is heuristic and for demo purposes; in production, fetch from a maintained list.\nexport const DOMAIN_INDEX = {\n  'who.int': {\n    score: 0.95,\n    reason: 'World Health Organization'\n  },\n  'cdc.gov': {\n    score: 0.94,\n    reason: 'Centers for Disease Control and Prevention'\n  },\n  'nih.gov': {\n    score: 0.92,\n    reason: 'National Institutes of Health'\n  },\n  'un.org': {\n    score: 0.9,\n    reason: 'United Nations'\n  },\n  'pib.gov.in': {\n    score: 0.9,\n    reason: 'Press Information Bureau (India)'\n  },\n  'factcheck.org': {\n    score: 0.9,\n    reason: 'Fact-checker'\n  },\n  'snopes.com': {\n    score: 0.88,\n    reason: 'Fact-checker'\n  },\n  'politifact.com': {\n    score: 0.88,\n    reason: 'Fact-checker'\n  },\n  'reuters.com': {\n    score: 0.85,\n    reason: 'Newswire'\n  },\n  'apnews.com': {\n    score: 0.85,\n    reason: 'Newswire'\n  },\n  'bbc.com': {\n    score: 0.83,\n    reason: 'Public broadcaster'\n  },\n  'theguardian.com': {\n    score: 0.8,\n    reason: 'Mainstream media'\n  }\n};\nexport function getDomain(hostname = '') {\n  return (hostname === null || hostname === void 0 ? void 0 : hostname.toLowerCase()) || '';\n}\nexport function getDomainScore(url) {\n  try {\n    const u = new URL(url);\n    const host = getDomain(u.hostname);\n    const exact = DOMAIN_INDEX[host];\n    if (exact) return {\n      host,\n      ...exact\n    };\n    // heuristic: official domains end with .gov or .edu\n    if (host.endsWith('.gov') || host.endsWith('.gov.in') || host.endsWith('.edu')) {\n      return {\n        host,\n        score: 0.85,\n        reason: 'Official/educational domain'\n      };\n    }\n    // default neutral\n    return {\n      host,\n      score: 0.6,\n      reason: 'Unknown domain (verify independently)'\n    };\n  } catch {\n    return {\n      host: '',\n      score: 0.5,\n      reason: 'Invalid URL'\n    };\n  }\n}","map":{"version":3,"names":["DOMAIN_INDEX","score","reason","getDomain","hostname","toLowerCase","getDomainScore","url","u","URL","host","exact","endsWith"],"sources":["E:/CredLens/frontend/src/utils/trustedSources.js"],"sourcesContent":["// Simple trusted source index: domain -> { score: 0..1, reason }\r\n// This is heuristic and for demo purposes; in production, fetch from a maintained list.\r\nexport const DOMAIN_INDEX = {\r\n  'who.int': { score: 0.95, reason: 'World Health Organization' },\r\n  'cdc.gov': { score: 0.94, reason: 'Centers for Disease Control and Prevention' },\r\n  'nih.gov': { score: 0.92, reason: 'National Institutes of Health' },\r\n  'un.org': { score: 0.9, reason: 'United Nations' },\r\n  'pib.gov.in': { score: 0.9, reason: 'Press Information Bureau (India)' },\r\n  'factcheck.org': { score: 0.9, reason: 'Fact-checker' },\r\n  'snopes.com': { score: 0.88, reason: 'Fact-checker' },\r\n  'politifact.com': { score: 0.88, reason: 'Fact-checker' },\r\n  'reuters.com': { score: 0.85, reason: 'Newswire' },\r\n  'apnews.com': { score: 0.85, reason: 'Newswire' },\r\n  'bbc.com': { score: 0.83, reason: 'Public broadcaster' },\r\n  'theguardian.com': { score: 0.8, reason: 'Mainstream media' },\r\n};\r\n\r\nexport function getDomain(hostname = '') {\r\n  return hostname?.toLowerCase() || '';\r\n}\r\n\r\nexport function getDomainScore(url) {\r\n  try {\r\n    const u = new URL(url);\r\n    const host = getDomain(u.hostname);\r\n    const exact = DOMAIN_INDEX[host];\r\n    if (exact) return { host, ...exact };\r\n    // heuristic: official domains end with .gov or .edu\r\n    if (host.endsWith('.gov') || host.endsWith('.gov.in') || host.endsWith('.edu')) {\r\n      return { host, score: 0.85, reason: 'Official/educational domain' };\r\n    }\r\n    // default neutral\r\n    return { host, score: 0.6, reason: 'Unknown domain (verify independently)' };\r\n  } catch {\r\n    return { host: '', score: 0.5, reason: 'Invalid URL' };\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,OAAO,MAAMA,YAAY,GAAG;EAC1B,SAAS,EAAE;IAAEC,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAA4B,CAAC;EAC/D,SAAS,EAAE;IAAED,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAA6C,CAAC;EAChF,SAAS,EAAE;IAAED,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAgC,CAAC;EACnE,QAAQ,EAAE;IAAED,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAiB,CAAC;EAClD,YAAY,EAAE;IAAED,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAmC,CAAC;EACxE,eAAe,EAAE;IAAED,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAe,CAAC;EACvD,YAAY,EAAE;IAAED,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAe,CAAC;EACrD,gBAAgB,EAAE;IAAED,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAe,CAAC;EACzD,aAAa,EAAE;IAAED,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAW,CAAC;EAClD,YAAY,EAAE;IAAED,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAW,CAAC;EACjD,SAAS,EAAE;IAAED,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAqB,CAAC;EACxD,iBAAiB,EAAE;IAAED,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAmB;AAC9D,CAAC;AAED,OAAO,SAASC,SAASA,CAACC,QAAQ,GAAG,EAAE,EAAE;EACvC,OAAO,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,WAAW,CAAC,CAAC,KAAI,EAAE;AACtC;AAEA,OAAO,SAASC,cAAcA,CAACC,GAAG,EAAE;EAClC,IAAI;IACF,MAAMC,CAAC,GAAG,IAAIC,GAAG,CAACF,GAAG,CAAC;IACtB,MAAMG,IAAI,GAAGP,SAAS,CAACK,CAAC,CAACJ,QAAQ,CAAC;IAClC,MAAMO,KAAK,GAAGX,YAAY,CAACU,IAAI,CAAC;IAChC,IAAIC,KAAK,EAAE,OAAO;MAAED,IAAI;MAAE,GAAGC;IAAM,CAAC;IACpC;IACA,IAAID,IAAI,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC9E,OAAO;QAAEF,IAAI;QAAET,KAAK,EAAE,IAAI;QAAEC,MAAM,EAAE;MAA8B,CAAC;IACrE;IACA;IACA,OAAO;MAAEQ,IAAI;MAAET,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAwC,CAAC;EAC9E,CAAC,CAAC,MAAM;IACN,OAAO;MAAEQ,IAAI,EAAE,EAAE;MAAET,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAc,CAAC;EACxD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}