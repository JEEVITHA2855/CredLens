{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true\n});\nexport const analyzeClaimAPI = async input => {\n  try {\n    const response = await api.post('/analyze', {\n      text: input.text\n    });\n    if (!response.data || !response.data.success) {\n      var _response$data;\n      throw new Error(((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.error) || 'Analysis failed');\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Analysis error:', error);\n    if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n      throw new Error(error.response.data.error);\n    } else if (error.response) {\n      throw new Error(error.response.data.detail || 'Analysis failed');\n    } else if (error.request) {\n      throw new Error('Network error - please check your connection');\n    } else {\n      throw new Error('Request failed - please try again');\n    }\n  }\n};\nexport const analyzeIndustrialAPI = async content => {\n  try {\n    const response = await api.post('/analyze-industrial', {\n      content\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.detail || 'Industrial analysis failed');\n    } else if (error.request) {\n      throw new Error('Network error - please check your connection');\n    } else {\n      throw new Error('Request failed - please try again');\n    }\n  }\n};\nexport const getHealthAPI = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw new Error('Health check failed');\n  }\n};\nexport const getStatsAPI = async () => {\n  try {\n    const response = await api.get('/stats');\n    return response.data;\n  } catch (error) {\n    throw new Error('Stats fetch failed');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","withCredentials","analyzeClaimAPI","input","response","post","text","data","success","_response$data","Error","error","_error$response","_error$response$data","console","detail","request","analyzeIndustrialAPI","content","getHealthAPI","get","getStatsAPI"],"sources":["E:/CredLens/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  },\r\n  withCredentials: true\r\n});\r\n\r\nexport const analyzeClaimAPI = async (input) => {\r\n  try {\r\n    const response = await api.post('/analyze', { text: input.text });\r\n    \r\n    if (!response.data || !response.data.success) {\r\n      throw new Error(response.data?.error || 'Analysis failed');\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Analysis error:', error);\r\n    if (error.response?.data?.error) {\r\n      throw new Error(error.response.data.error);\r\n    } else if (error.response) {\r\n      throw new Error(error.response.data.detail || 'Analysis failed');\r\n    } else if (error.request) {\r\n      throw new Error('Network error - please check your connection');\r\n    } else {\r\n      throw new Error('Request failed - please try again');\r\n    }\r\n  }\r\n};\r\n\r\nexport const analyzeIndustrialAPI = async (content) => {\r\n  try {\r\n    const response = await api.post('/analyze-industrial', { content });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(error.response.data.detail || 'Industrial analysis failed');\r\n    } else if (error.request) {\r\n      throw new Error('Network error - please check your connection');\r\n    } else {\r\n      throw new Error('Request failed - please try again');\r\n    }\r\n  }\r\n};\r\n\r\nexport const getHealthAPI = async () => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Health check failed');\r\n  }\r\n};\r\n\r\nexport const getStatsAPI = async () => {\r\n  try {\r\n    const response = await api.get('/stats');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Stats fetch failed');\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}